
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: db-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi    

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: db-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vote
spec:
  replicas: 3
  selector:
    matchLabels:
      app: vote
  template:
    metadata:
      labels:
        app: vote
    spec:
      containers:
        - name: vote
          image: europe-west9-docker.pkg.dev/vote-454908/voting-image/vote
          ports:
            - containerPort: 5000
          readinessProbe:
            httpGet:
              path: /
              port: 5000
            initialDelaySeconds: 5
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /
              port: 5000
            initialDelaySeconds: 15
            periodSeconds: 20
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "500m"
              memory: "256Mi"

---
apiVersion: v1
kind: Service
metadata:
  name: vote
spec:
  selector:
    app: vote
  ports:
    - protocol: TCP
      port: 80
      targetPort: 5000  
  type: LoadBalancer

---
# Déploiement pour result
apiVersion: apps/v1
kind: Deployment
metadata:
  name: result
spec:
  replicas: 1
  selector:
    matchLabels:
      app: result
  template:
    metadata:
      labels:
        app: result
    spec:
      containers:
        - name: result
          image: europe-west9-docker.pkg.dev/vote-454908/voting-image/result
          ports:
            - containerPort: 3000
---
# Service pour result
apiVersion: v1
kind: Service
metadata:
  name: result
spec:
  selector:
    app: result
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3000
  type: LoadBalancer

---
# Déploiement pour redis
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis
          ports:
            - containerPort: 6379
---
# Service pour redis
apiVersion: v1
kind: Service
metadata:
  name: redis
spec:
  selector:
    app: redis
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379
  type: ClusterIP

---
# Déploiement pour db (avec volume persistant)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db
  template:
    metadata:
      labels:
        app: db
    spec:
      containers:
        - name: db
          image: postgres:latest  # Utilisation de l'image PostgreSQL
          env:
            - name: POSTGRES_USER
              value: "postgres"  # Spécifie le nom d'utilisateur pour PostgreSQL
            - name: POSTGRES_PASSWORD
              value: "postgres"  # Spécifie le mot de passe pour PostgreSQL
            - name: POSTGRES_DB
              value: "postgres"  # Spécifie le nom de la base de données
          ports:
            - containerPort: 5432  # Le port par défaut de PostgreSQL
          volumeMounts:
            - name: db-storage
              mountPath: /var/lib/postgresql/data  # Le chemin pour les données PostgreSQL
              subPath: data
      volumes:
        - name: db-storage
          persistentVolumeClaim:
            claimName: db-pvc


---
# Service pour db
apiVersion: v1
kind: Service
metadata:
  name: db
spec:
  selector:
    app: db
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
  type: ClusterIP



---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: worker
spec:
  replicas: 2
  selector:
    matchLabels:
      app: worker
  template:
    metadata:
      labels:
        app: worker
    spec:
      containers:
        - name: worker
          image: europe-west9-docker.pkg.dev/vote-454908/voting-image/worker
          env:
            - name: REDIS_HOST
              value: "redis"
            - name: POSTGRES_HOST
              value: "db"
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "500m"
              memory: "256Mi"
---
# apiVersion: batch/v1
# kind: Job
# metadata:
#   name: seed
# spec:
#   template:
#     spec:
#       containers:
#       - name: seed
#         image: busybox
#         command: ["/bin/sh", "-c"]
#         args:
#         - |
#           echo "Installing curl...";
#           wget -q -O /tmp/ab http://archive.ubuntu.com/ubuntu/pool/main/a/apache2/apache2-utils_2.4.29-1ubuntu4_amd64.deb;
#           chmod +x /tmp/ab;
          
#           echo "Waiting for vote service...";
#           while ! wget -q -O- http://vote:5000; do sleep 1; done;
          
#           echo "Starting load test...";
#           /tmp/ab -n 300 -c 5 http://vote:5000/;
#         resources:
#           limits:
#             cpu: "500m"
#             memory: "256Mi"
#       restartPolicy: Never
#   backoffLimit: 1

apiVersion: batch/v1
kind: Job
metadata:
  name: seed
spec:
  template:
    spec:
      containers:
        - name: seed
          image: europe-west9-docker.pkg.dev/vote-454908/voting-image/seed-data  
      restartPolicy: Never
  backoffLimit: 4
